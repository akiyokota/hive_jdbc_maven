package hive_jdbc.hive_jdbc;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Hello world!
 *
 */
public class App 
{
	
	private static Connection con;
	private static Statement stmt;
	private static ResultSet res;
	
	private static String sears = "jdbc:hive2://dwhadoop306p.qa.ch3.s.com:21050/incoming_fphd;auth=noSasl";

	private static String searsLogin = "ayokota";
	private static String searspass = "282206709b";
	
	private static String driverName = "org.apache.hive.jdbc.HiveDriver";
	
	public static void establishHiveConnection(String url, String user, String pw) {
		try {
			Class.forName(driverName);
			System.out.println("Trying to connect to hive database...");
			con = DriverManager.getConnection(url, user, pw);
			System.out.println("Connection succesfully established!");
			stmt = con.createStatement();

		} catch (Exception e) {
			 e.printStackTrace();
		}
	}
	
	public static void showTables() throws Exception {
		res = stmt.executeQuery("show tables");
		while (res.next()) {
		  System.out.println(res.getString(1));
		}
	}
	
	public static void describeTable(String table) throws Exception {
		res = stmt.executeQuery("describe " + table);
		while (res.next()) {
		  System.out.println(res.getString(1) + "\t" + res.getString(2));
		}
	}
	
	public static void createTable(String table, Map<String, String> attributes) throws Exception {
		stmt.executeUpdate("drop table if exists " + table);
		
		String sql = "create table " + table + " (";
		Iterator it = attributes.entrySet().iterator();
	    while (it.hasNext()) {
	        Map.Entry pair = (Map.Entry)it.next();
	        sql = sql + pair.getKey() + " " + pair.getValue() + ",";
	        it.remove(); 
	    }
	    sql = sql.substring(0,sql.length()-1);
	    sql += ")";
	    stmt.executeUpdate(sql);
		
	}
	
	public static void main(String[] args) {
		if(args.length < 5) {
			System.out.println("Too few arguments.\n" +
								"Usage:\n"+
								"1. Hadoop_Host:port\n" +
								"2. Username\n" +
								"3. Password\n" +
								"4. Database name\n" +
								"5. SQL filename\n");
			return;
		}  
		try {
			 //----- establish connection
			 establishHiveConnection(args[0], args[1], args[2]);			 

			 stmt.executeUpdate("use " + args[3]);
			 showTables();

			 
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}